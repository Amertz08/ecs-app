name: build-image
on:
  push:
    branches:
      - "feature/**"
      - "!master"
jobs:
  build-uwsgi-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flask-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:uwsgi-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:uwsgi-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:uwsgi-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags

  build-nginx-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flask-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f nginx/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:nginx-$IMAGE_TAG nginx
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:nginx-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:nginx-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-nginx-image
      - build-uwsgi-image
    steps:
      - name: "Terragrunt Init"
        uses: the-commons-project/terragrunt-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tg_actions_version: ${{ env.tg_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
